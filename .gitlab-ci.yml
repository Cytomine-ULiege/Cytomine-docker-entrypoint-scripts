stages:
  - lint
  - build

variables:
  IMAGE_NAME: "cytomine/entrypoint-scripts"
  IMAGE_VERSION: "invalid"
  # Those other vars should be inherited from GitLab:
  # DOCKER_HUB_AUTH_CONFIG

workflow:
  rules:
    # Avoid the pipeline to be triggered for merge request event, because it would be a duplicated event when
    #  a push is made on a branch that has an open merge request linked (as suggested in the default GitLab workflow)
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
      when: never

    # Publish only tags matching our guidelines
    # (see https://gitlab.cytom.in/groups/cm/rnd/docs/-/wikis/home#versioning )
    - if: $CI_COMMIT_TAG != null && $CI_COMMIT_TAG =~ /^[0-9]+(?:\.[0-9]+){0,2}(-.*)*$/
      variables:
        IS_OPEN_SOURCE_RELEASE_CANDIDATE: "true"
        IMAGE_VERSION: $CI_COMMIT_TAG

    - when: always

default:
  tags:
    - docker

lint-dockerfiles:
  stage: lint
  image: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/hadolint/hadolint:latest-alpine
  # Uncomment to silent some warnings if needed
  #variables:
  #  HADOLINT_OPT: --ignore DL3008
  script:
    - hadolint ${HADOLINT_OPT} Dockerfile
  rules:
    - changes:
        - Dockerfile
      when: always

    # If the Dockerfile has not been changed, this job can be skipped
    - when: never
      allow_failure: true

enforce-tag-guideline:
  stage: lint
  image: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/bash:latest
  # This job is only meant to fail the pipeline if the tag does not match our guidelines.
  rules:
    - if: $CI_COMMIT_TAG != null && $IMAGE_VERSION == 'invalid'
  script:
    - echo "The tag $CI_COMMIT_TAG does not follow our guideline. See https://gitlab.cytom.in/groups/cm/rnd/docs/-/wikis/home#versioning
    - exit 1

build-docker-image:
  stage: build
  image: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/docker:latest
  rules:
    - if: $IS_OPEN_SOURCE_RELEASE_CANDIDATE == 'true'
  script:
    - echo "The tag $CI_COMMIT_TAG has been pushed. Build & publish the image."

    - echo "Build ${IMAGE_NAME}:${IMAGE_VERSION}"
    - |
      docker build \
        --build-arg IMAGE_VERSION=${IMAGE_VERSION} \
        --build-arg IMAGE_REVISION=${CI_COMMIT_SHORT_SHA} \
        -t ${IMAGE_NAME}:${IMAGE_VERSION} \ 
        -t ${IMAGE_NAME}:latest \
        -f Dockerfile \
        .

    # Use credential helper (see https://docs.docker.com/engine/reference/commandline/login/#credentials-store)
    - mkdir -p $HOME/.docker && echo $DOCKER_HUB_AUTH_CONFIG > $HOME/.docker/config.json
    - echo "Registry credentials configured at $HOME/.docker/config.json"

    - echo "Pushing image to registry, tagged as ${IMAGE_NAME}:${IMAGE_VERSION}"
    - docker push ${IMAGE_NAME}:${IMAGE_VERSION}
    - echo "Pushing image to registry, tagged as ${IMAGE_NAME}:latest"
    - docker push ${IMAGE_NAME}:latest
    - echo "Successfully pushed docker image ${IMAGE_NAME}:${CM_VERSION} and ${DOCKER_IMAGE_NAME}:latest"

    # - echo "No tag has been pushed, this build will not be published."